import static org.junit.Assert.assertEquals;

import java.util.ArrayList;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

public class LZWCompressionTest {
    @BeforeAll
    static void setup() throws Exception {
        Utils.deleteFile("test");
        Utils.writeStringToFile("test",
                "A robot may not injure a human being or, through inaction, allow a human being to come to harm. A robot must obey the orders given to it by human beings, except where such orders would conflict with the First Law. A robot must protect its own existence.");
    }

    @AfterAll
    static void cleanup() throws Exception {
        Utils.deleteFile("test");
    }

    @Test
    void testCompress() throws Exception {
        int[] codes = { 65, 32, 114, 111, 98, 111, 116, 32, 109, 97, 121, 32, 110, 261, 32, 105, 110, 106, 117, 114,
                101, 32, 97, 32, 104, 117, 264, 110, 32, 98, 101, 271, 103, 32, 111, 114, 44, 32, 116, 104, 258, 117,
                103, 104, 270, 110, 97, 99, 116, 105, 111, 110, 292, 97, 108, 108, 111, 119, 277, 279, 281, 97, 283,
                285, 287, 293, 111,
                32, 99, 111, 109, 276, 116, 322, 104, 97, 114, 109, 46, 32, 256, 258, 260, 262, 109, 117, 115, 262, 259,
                101, 266, 294, 276, 290, 100, 101, 114, 115, 32, 103, 105, 118, 101, 283, 328, 270, 262, 98, 266, 280,
                282, 284, 286, 110, 103, 115, 292, 101, 120, 99, 101, 112, 262, 119, 104, 351, 276, 115, 117, 99, 299,
                349,
                351, 353, 119, 111, 117, 108, 100, 323, 306, 102, 108, 105, 303, 32, 119, 105, 294, 293, 380, 32, 70,
                105, 352, 262, 76, 97, 119, 334, 336, 259, 269, 340, 342, 32, 112, 258, 116, 101, 400, 403, 353, 312,
                283, 373, 105, 342, 358, 375, 46 };
        ArrayList<Integer> codesList = new ArrayList<>();
        for (int code : codes) {
            codesList.add(code);
        }

        assertEquals("not the right codes are created", codesList, LZWCompression.compressToCodes("test"));

        ArrayList<boolean[]> bins = LZWCompression.compress("test");
        StringBuilder testBins = new StringBuilder();
        for (boolean[] bits : bins) {
            for (boolean bit : bits) {
                if (bit) {
                    testBins.append("1");
                } else {
                    testBins.append("0");
                }
            }
        }

        String expectedBins

        assertEquals("not the right bins are created", testBins.toString(), expectedBins);
    }

    @Test
    void testDecode() throws Exception {
        int[] codes = { 65, 32, 114, 111, 98, 111, 116, 32, 109, 97, 121, 32, 110, 261, 32, 105, 110, 106, 117, 114,
                101, 32, 97, 32, 104, 117, 264, 110, 32, 98, 101, 271, 103, 32, 111, 114, 44, 32, 116, 104, 258, 117,
                103, 104, 270, 110, 97, 99, 116, 105, 111, 110, 292, 97, 108, 108, 111, 119, 277, 279, 281, 97, 283,
                285, 287, 293, 111,
                32, 99, 111, 109, 276, 116, 322, 104, 97, 114, 109, 46, 32, 256, 258, 260, 262, 109, 117, 115, 262, 259,
                101, 266, 294, 276, 290, 100, 101, 114, 115, 32, 103, 105, 118, 101, 283, 328, 270, 262, 98, 266, 280,
                282, 284, 286, 110, 103, 115, 292, 101, 120, 99, 101, 112, 262, 119, 104, 351, 276, 115, 117, 99, 299,
                349,
                351, 353, 119, 111, 117, 108, 100, 323, 306, 102, 108, 105, 303, 32, 119, 105, 294, 293, 380, 32, 70,
                105, 352, 262, 76, 97, 119, 334, 336, 259, 269, 340, 342, 32, 112, 258, 116, 101, 400, 403, 353, 312,
                283, 373, 105, 342, 358, 375, 46 };
        ArrayList<Integer> codesList = new ArrayList<>();
        for (int code : codes) {
            codesList.add(code);
        }
        String expected = "A robot may not injure a human being or, through inaction, allow a human being to come to harm. A robot must obey the orders given to it by human beings, except where such orders would conflict with the First Law. A robot must protect its own existence.";

        assertEquals("the correct string is not decoded", expected, LZWCompression.decodeCodes(codesList));
    }
}
